package main

const template11 string = `/// -------------------------------------------------------------------------------
/// THIS FILE IS ORIGINALLY GENERATED BY redis2go.exe.
/// PLEASE DO NOT MODIFY THIS FILE.
/// -------------------------------------------------------------------------------

package {{packagename}}

import (
	go_redis_orm "github.com/fananchong/go-redis-orm.v2"
	"github.com/garyburd/redigo/redis"
)

type RD_{{classname}} struct {
	Key {{key_type}}
	{{fields_def}}

    __dirtyData map[string]interface{}
	__isLoad bool
	__dbKey string
}

func NewRD_{{classname}}() *RD_{{classname}} {
	return &RD_{{classname}} {
		__dirtyData: make(map[string]interface{}),
	}
}

func (this *RD_{{classname}}) Load(dbName string, key {{key_type}}) error {
	if this.__isLoad == true {
		return errors.New("alreay load!")
	}
	this.__dbKey = dbKey(key)
	db := go_redis_orm.GetDB(dbName)
	val, err := db.Do("HGETALL", this.__dbKey)
	if err != nil {
		return err
	}
	if err := redis.ScanStruct(val, this); err != nil {
		return err
	}
	this.__isLoad = true
	return nil
}

func (this *RD_{{classname}}) Save(dbName string) error {
	if len(this.__dirtyData) == 0 {
		return nil
	}
	db := go_redis_orm.GetDB(dbName)
	if _, err := c.Do("HMSET", redis.Args{}.Add(this.__dbKey).AddFlat(this.__dirtyData)...); err != nil {
    	return err
	}
	this.__dirtyData = make(map[string]interface{})
	return nil
}

func (this *RD_{{classname}}) Delete(dbName string) error {
	db := go_redis_orm.GetDB(dbName)
	_, err := db.Do("DEL", dbKey(key))
	return err
}

func (this *RD_{{classname}}) IsLoad() bool {
	return this.__isLoad
}

{{func_get}}

{{func_set}}

{{func_dbkey}}`

const getFuncString = `func (this *RD_{{classname}})Get{{field_name_upper}}() {{field_type}} {
	return this.{{field_name_lower}}
}`
